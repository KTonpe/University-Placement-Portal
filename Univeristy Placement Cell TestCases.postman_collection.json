{
	"info": {
		"_postman_id": "982968e2-3e66-4b16-bb6d-45063599705d",
		"name": "Univeristy Placement Cell TestCases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33860739"
	},
	"item": [
		{
			"name": "STUDENT",
			"item": [
				{
					"name": "ADD STUDENT_api",
					"item": [
						{
							"name": "Success Add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Response contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Student added successfully\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"{{Stud_ID_1}}\",\r\n    \"name\": \"{{Stud_Name_1}}\",\r\n    \"branch\": \"CIVIL\",\r\n    \"admission_year\": \"2019\",\r\n    \"placed\": \"No\",\r\n    \"semester_wise_marks\": \"80,85,90,88,87,85,98,100\",\r\n    \"certified_skills\": \"Drawing,Photoshop,Comedy\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Stud}}",
									"host": [
										"{{BASE}}{{B_Add_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message indicates missing student_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"student_id is required and should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"John Doe\",\r\n    \"branch\": \"CS\",\r\n    \"admission_year\": \"2022\",\r\n    \"placed\": \"No\",\r\n    \"semester_wise_marks\": \"85,90,78,88\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Stud}}",
									"host": [
										"{{BASE}}{{B_Add_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Data Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain error message for data type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"student_id should be a string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": 1001,\r\n    \"name\": \"John Doe\",\r\n    \"branch\": \"CS\",\r\n    \"admission_year\": \"2022\",\r\n    \"placed\": \"No\",\r\n    \"semester_wise_marks\": \"85,90,78,88\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Stud}}",
									"host": [
										"{{BASE}}{{B_Add_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Branch Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain error message for branch\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"branch should be one of ['CS', 'CIVIL', 'ELECTRONIC', 'MECH', 'IT']\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S1001\",\r\n    \"name\": \"John Doe\",\r\n    \"branch\": \"BIO\",\r\n    \"admission_year\": \"2022\",\r\n    \"placed\": \"No\",\r\n    \"semester_wise_marks\": \"85,90,78,88\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Stud}}",
									"host": [
										"{{BASE}}{{B_Add_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success Missing Optional fields_",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Student added successfully\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"{{Stud_ID_2}}\",\r\n    \"name\": \"{{Stud_Name_2}}\",\r\n    \"branch\": \"IT\",\r\n    \"admission_year\": \"2019\",\r\n    \"semester_wise_marks\": \"80,85,90,95\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Stud}}",
									"host": [
										"{{BASE}}{{B_Add_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Marks Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain error message for invalid marks\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"semester_wise_marks should contain valid integers separated by commas\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S1003\",\r\n    \"name\": \"Bob Brown\",\r\n    \"branch\": \"IT\",\r\n    \"admission_year\": \"2024\",\r\n    \"placed\": \"No\",\r\n    \"semester_wise_marks\": \"85,90,A,88\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Stud}}",
									"host": [
										"{{BASE}}{{B_Add_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Existing Student ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain error message for existing student ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Student ID already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"{{Stud_ID_1}}\",\r\n    \"name\": \"Jane Doe\",\r\n    \"branch\": \"IT\",\r\n    \"admission_year\": \"2021\",\r\n    \"placed\": \"Yes\",\r\n    \"semester_wise_marks\": \"75,85,65,80\",\r\n    \"certified_skills\": \"C++,JavaScript\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Stud}}",
									"host": [
										"{{BASE}}{{B_Add_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Incorrect Request Method",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});",
											"",
											"pm.test(\"Error message indicates method not allowed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"100123av\",\r\n    \"name\": \"Kaustubh Tonpe\",\r\n    \"branch\": \"ELECTRONIC\",\r\n    \"admission_year\": \"2020\",\r\n    \"placed\": \"No\",\r\n    \"semester_wise_marks\": \"80,85,90,88,87,85,98,100\",\r\n    \"certified_skills\": \"Python, Java\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Stud}}",
									"host": [
										"{{BASE}}{{B_Add_Stud}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEL STUDENT_api",
					"item": [
						{
							"name": "Success Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Student deleted successfully\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Del_Stud}}?student_id={{Stud_ID_2}}&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_Del_Stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "{{Stud_ID_2}}"
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Stud ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Missing student_id or password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Del_Stud}}?&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_Del_Stud}}"
									],
									"query": [
										{
											"key": null,
											"value": null
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Pass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Missing student_id or password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Del_Stud}}?{{Stud_ID_2}}",
									"host": [
										"{{BASE}}{{B_Del_Stud}}"
									],
									"query": [
										{
											"key": "{{Stud_ID_2}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Pass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401) || pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"Password doesn't match\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Del_Stud}}?student_id={{Stud_ID_1}}&{{Invlaid_Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_Del_Stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "{{Stud_ID_1}}"
										},
										{
											"key": "{{Invlaid_Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Handling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});",
											"pm.test(\"Response body contains error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Del_Stud}}?{{Stud_Name_1}}&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_Del_Stud}}"
									],
									"query": [
										{
											"key": "{{Stud_Name_1}}",
											"value": null
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stud Doesn't Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404) || pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"Student ID S0T53 doesn't exist\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Del_Stud}}?student_id=S0T53&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_Del_Stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "S0T53"
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "STUDENT DETAILS_api",
					"item": [
						{
							"name": "Display Student Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains student details\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"Student ID\");\r",
											"    pm.expect(jsonData).to.have.property(\"Name\");\r",
											"    pm.expect(jsonData).to.have.property(\"Branch\");\r",
											"    pm.expect(jsonData).to.have.property(\"Admission Year\");\r",
											"    pm.expect(jsonData).to.have.property(\"Placed\");\r",
											"    pm.expect(jsonData).to.have.property(\"Semester-wise Marks\");\r",
											"    pm.expect(jsonData).to.have.property(\"Percentage\");\r",
											"    pm.expect(jsonData).to.have.property(\"Certified Skills\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "student_id",
										"value": "S002",
										"disabled": true
									},
									{
										"key": "password",
										"value": "student123",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{BASE}}{{B_details_stud}}?student_id={{Stud_ID_1}}&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_details_stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "{{Stud_ID_1}}"
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message for missing student_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Missing student_id or password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_details_stud}}?{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_details_stud}}"
									],
									"query": [
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401) || pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"Password doesn't match\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_details_stud}}?student_id={{Stud_ID_1}}&{{Invlaid_Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_details_stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "{{Stud_ID_1}}"
										},
										{
											"key": "{{Invlaid_Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Handling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message indicates method not allowed\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_details_stud}}?student_id=S003&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_details_stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "S003"
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404) || pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"Student ID S0SACHIN doesn't exist\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_details_stud}}?student_id=S0SACHIN&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_details_stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "S0SACHIN"
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "STUDENT ELIGIBILTY_api",
					"item": [
						{
							"name": "DISPLAY ELIGIBILTY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains eligible companies\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
											"    jsonData.forEach(function(company) {\r",
											"        pm.expect(company).to.have.property(\"Company Name\");\r",
											"        pm.expect(company).to.have.property(\"Placement Likelihood\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Eligibilty_stud}}?student_id={{Stud_ID_1}}&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_Eligibilty_stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "{{Stud_ID_1}}"
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message for missing student ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Invalid student ID or password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Eligibilty_stud}}?{{Invlaid_Pass_Stud}}&student_id=S001",
									"host": [
										"{{BASE}}{{B_Eligibilty_stud}}"
									],
									"query": [
										{
											"key": "{{Invlaid_Pass_Stud}}",
											"value": null
										},
										{
											"key": "student_id",
											"value": "S001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Parameters Not Given",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message for missing Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Missing student_id or password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Eligibilty_stud}}?{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_Eligibilty_stud}}"
									],
									"query": [
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "XSS Attack Attempt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response is sanitized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.not.include(\"<script>\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Eligibilty_stud}}?student_id=<script>alert('XSS')</script>&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_Eligibilty_stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "<script>alert('XSS')</script>"
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL Injection Attempt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Invalid input\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Eligibilty_stud}}?student_id='; DROP TABLE STUDENT;--&{{Pass_Stud}}}",
									"host": [
										"{{BASE}}{{B_Eligibilty_stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "'; DROP TABLE STUDENT;--"
										},
										{
											"key": "{{Pass_Stud}}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Handling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message indicates method not allowed\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Eligibilty_stud}}?student_id=S002&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_Eligibilty_stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "S002"
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404) || pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"Invalid student ID or password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Eligibilty_stud}}?student_id=XYZ&{{Pass_Stud}}",
									"host": [
										"{{BASE}}{{B_Eligibilty_stud}}"
									],
									"query": [
										{
											"key": "student_id",
											"value": "XYZ"
										},
										{
											"key": "{{Pass_Stud}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "STUDENT UPDATE_SKILL_api",
					"item": [
						{
							"name": "Success Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\").and.include(\"Skills updated successfully of student ID\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"{{Stud_ID_1}}\",\r\n    \"password\": \"student123\",\r\n    \"new_skills\": [\"Python\", \"Java\",\"Time Management\",\"Drawing\",\"Time Management\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Updat_Skil_Stud}}",
									"host": [
										"{{BASE}}{{B_Updat_Skil_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Missing student_id, password, or new_skills\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S1002AC\",\r\n    \"password\": \"student123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Updat_Skil_Stud}}",
									"host": [
										"{{BASE}}{{B_Updat_Skil_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Pass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Invalid student ID or password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"{{Stud_ID_1}}\",\r\n    \"password\": \"student123A\",\r\n    \"new_skills\": [\"Python\", \"Java\",\"Python\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Updat_Skil_Stud}}",
									"host": [
										"{{BASE}}{{B_Updat_Skil_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL Injects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Invalid input\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"'; DROP TABLE STUDENT;--\",\r\n    \"password\": \"studnet123\",\r\n    \"new_skills\": [\"Python\", \"Java\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Updat_Skil_Stud}}",
									"host": [
										"{{BASE}}{{B_Updat_Skil_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty Arg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Missing student_id, password, or new_skills\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S1002AC\",\r\n    \"password\": \"student123\",\r\n    \"new_skills\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Updat_Skil_Stud}}",
									"host": [
										"{{BASE}}{{B_Updat_Skil_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success Duplicates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\").and.include(\"Skills updated successfully of student ID\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"{{Stud_ID_1}}\",\r\n    \"password\": \"student123\",\r\n    \"new_skills\": [\"Python\", \"Java\",\"Snowflake\",\"SQL\",\"Python\",\"Snowflake\",\"Python\",\"Comedy\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Updat_Skil_Stud}}",
									"host": [
										"{{BASE}}{{B_Updat_Skil_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404) || pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"Invalid student ID\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S1002ACV2\",\r\n    \"password\": \"student123\",\r\n    \"new_skills\": [\"Python\", \"Java\",\"Python\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Updat_Skil_Stud}}",
									"host": [
										"{{BASE}}{{B_Updat_Skil_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message indicates method not allowed\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S001\",\r\n    \"password\": \"student123\",\r\n    \"new_skills\": [\"Python\", \"Java\",\"Python\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Updat_Skil_Stud}}",
									"host": [
										"{{BASE}}{{B_Updat_Skil_Stud}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "STUDENT APPLY_api",
					"item": [
						{
							"name": "Success Apply",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Application submitted successfully message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Application submitted successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"{{Stud_ID_1}}\",\r\n    \"password\": \"student123\",\r\n    \"company_id\": \"12\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Apply_Stud}}",
									"host": [
										"{{BASE}}{{B_Apply_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Missing parameter error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"Missing student_id, password, or company_id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S001\",\r\n    \"password\": \"student123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Apply_Stud}}",
									"host": [
										"{{BASE}}{{B_Apply_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid credentials message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Student ID S9999 doesn't exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S9999\",\r\n    \"password\": \"wrongpassword\",\r\n    \"company_id\": \"C2001\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Apply_Stud}}",
									"host": [
										"{{BASE}}{{B_Apply_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid credentials message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Password doesn't match\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S001\",\r\n    \"password\": \"wrongpassword\",\r\n    \"company_id\": \"C2001\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Apply_Stud}}",
									"host": [
										"{{BASE}}{{B_Apply_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Already Placed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Already placed message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"You're Already Placed!\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S017\",\r\n    \"password\": \"student123\",\r\n    \"company_id\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Apply_Stud}}",
									"host": [
										"{{BASE}}{{B_Apply_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Company Doesn't Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Company does not exist error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"Company ID 9999 doesn't exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S018\",\r\n    \"password\": \"student123\",\r\n    \"company_id\": \"9999\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Apply_Stud}}",
									"host": [
										"{{BASE}}{{B_Apply_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Handling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message indicates method not allowed\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Apply_Stud}}",
									"host": [
										"{{BASE}}{{B_Apply_Stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Duplicate application rejected\", function() {\r",
											"    pm.response.to.have.status(409);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"You have already applied to this company\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"{{Stud_ID_1}}\",\r\n    \"password\": \"student123\",\r\n    \"company_id\": \"12\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Apply_Stud}}",
									"host": [
										"{{BASE}}{{B_Apply_Stud}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "STUDENT APPLICATIONS DISPLAY",
					"item": [
						{
							"name": "Success Display",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Valid student credentials\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"applications\");\r",
											"    pm.expect(jsonData.applications).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check application details\", function() {\r",
											"    var jsonData = pm.response.json();\r",
											"    if (jsonData.applications.length > 0) {\r",
											"        jsonData.applications.forEach(function(application) {\r",
											"            pm.expect(application).to.have.property(\"application_id\");\r",
											"            pm.expect(application).to.have.property(\"company_name\");\r",
											"            pm.expect(application).to.have.property(\"status\");\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"{{Stud_ID_1}}\",\r\n    \"password\": \"student123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_disp_App_of_stud}}",
									"host": [
										"{{BASE}}{{B_disp_App_of_stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.eql(\"No applications found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"S016\",\r\n    \"password\": \"student123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_disp_App_of_stud}}",
									"host": [
										"{{BASE}}{{B_disp_App_of_stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.eql(\"Missing student_id or password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"student123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_disp_App_of_stud}}",
									"host": [
										"{{BASE}}{{B_disp_App_of_stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Updated status code test to check for 401 or 403\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.eql(\"Student ID 12345 doesn\\'t exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"12345\",\r\n    \"password\": \"student123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_disp_App_of_stud}}",
									"host": [
										"{{BASE}}{{B_disp_App_of_stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL Injection Attempt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid input\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"student_id\": \"1' OR '1'='1\",\r\n    \"password\": \"student123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_disp_App_of_stud}}",
									"host": [
										"{{BASE}}{{B_disp_App_of_stud}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Handling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message indicates method not allowed\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_disp_App_of_stud}}",
									"host": [
										"{{BASE}}{{B_disp_App_of_stud}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "COMPANY",
			"item": [
				{
					"name": "ADD COMPANY_api",
					"item": [
						{
							"name": "Success Added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Response contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Company added successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company_id\": \"{{Comp_ID_1}}\",\r\n    \"name\": \"{{Comp_Name_1}}\",\r\n    \"brief_description\": \"A leading tech company\",\r\n    \"required_percentage\": 98.0,\r\n    \"branch\": \"CS\",\r\n    \"required_skills\": \"Python, Java,SnowFlake\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Comp}}",
									"host": [
										"{{BASE}}{{B_Add_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Missing required company details\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Tech Corp\",\r\n    \"brief_description\": \"A leading tech company\",\r\n    \"required_percentage\": 75.5,\r\n    \"branch\": \"CS\",\r\n    \"required_skills\": \"Python, Java\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Comp}}",
									"host": [
										"{{BASE}}{{B_Add_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Data Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"required_percentage should be a float\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company_id\": \"C12345\",\r\n    \"name\": \"Tech Corp\",\r\n    \"brief_description\": \"A leading tech company\",\r\n    \"required_percentage\": \"seventy-five\",\r\n    \"branch\": \"CS\",\r\n    \"required_skills\": \"Python, Java\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Comp}}",
									"host": [
										"{{BASE}}{{B_Add_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL Injection Attempt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid input\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company_id\": \"C12345'; DROP TABLE COMPANY; --\",\r\n    \"name\": \"Tech Corp\",\r\n    \"brief_description\": \"A leading tech company\",\r\n    \"required_percentage\": 75.5,\r\n    \"branch\": \"CS\",\r\n    \"required_skills\": \"Python, Java\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Comp}}",
									"host": [
										"{{BASE}}{{B_Add_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID Already Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Company ID already exists\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company_id\": \"{{Comp_ID_1}}\",\r\n    \"name\": \"Tech Corp\",\r\n    \"brief_description\": \"A leading tech company\",\r\n    \"required_percentage\": 75.5,\r\n    \"branch\": \"CS\",\r\n    \"required_skills\": \"Python, Java\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Comp}}",
									"host": [
										"{{BASE}}{{B_Add_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Handle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company_id\": \"C12345\",\r\n    \"name\": \"Tech Corp\",\r\n    \"brief_description\": \"A leading tech company\",\r\n    \"required_percentage\": 75.5,\r\n    \"branch\": \"CS\",\r\n    \"required_skills\": \"Python, Java\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Comp}}",
									"host": [
										"{{BASE}}{{B_Add_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding another",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company_id\": \"{{Comp_ID_2}}\",\r\n    \"name\": \"{{Comp_Name_2}}\",\r\n    \"brief_description\": \"A leading tech company\",\r\n    \"required_percentage\": 98.0,\r\n    \"branch\": \"CS\",\r\n    \"required_skills\": \"Python, Java,SnowFlake\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Add_Comp}}",
									"host": [
										"{{BASE}}{{B_Add_Comp}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DISPLAY COMPANY_api",
					"item": [
						{
							"name": "Success Display",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response contains company details\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"Company ID\");\r",
											"    pm.expect(jsonData).to.have.property(\"Name\");\r",
											"    pm.expect(jsonData).to.have.property(\"Branch\");\r",
											"    pm.expect(jsonData).to.have.property(\"Required Percentage\");\r",
											"    pm.expect(jsonData).to.have.property(\"Required Skills\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Output data types are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[\"Company ID\"]).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[\"Name\"]).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[\"Branch\"]).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[\"Brief Description\"]).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[\"Required Percentage\"]).to.be.a(\"number\");\r",
											"    pm.expect(jsonData[\"Required Skills\"]).to.be.a(\"array\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Disp_Comp}}?company_id={{Comp_ID_1}}&{{Comp_Pass}}",
									"host": [
										"{{BASE}}{{B_Disp_Comp}}"
									],
									"query": [
										{
											"key": "company_id",
											"value": "{{Comp_ID_1}}"
										},
										{
											"key": "{{Comp_Pass}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Missing company_id or company_password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Disp_Comp}}?{{Comp_Pass}}",
									"host": [
										"{{BASE}}{{B_Disp_Comp}}"
									],
									"query": [
										{
											"key": "{{Comp_Pass}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Password doesn\\'t match\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Disp_Comp}}?company_id={{Comp_ID_1}}&{{Comp_Invalid_pass}}",
									"host": [
										"{{BASE}}{{B_Disp_Comp}}"
									],
									"query": [
										{
											"key": "company_id",
											"value": "{{Comp_ID_1}}"
										},
										{
											"key": "{{Comp_Invalid_pass}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL Injection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid input\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Disp_Comp}}?company_id=C12345'; DROP TABLE COMPANY; --&{{Comp_Pass}}",
									"host": [
										"{{BASE}}{{B_Disp_Comp}}"
									],
									"query": [
										{
											"key": "company_id",
											"value": "C12345'; DROP TABLE COMPANY; --"
										},
										{
											"key": "{{Comp_Pass}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Handling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Disp_Comp}}?company_id={{Comp_ID_1}}&{{Comp_Pass}}",
									"host": [
										"{{BASE}}{{B_Disp_Comp}}"
									],
									"query": [
										{
											"key": "company_id",
											"value": "{{Comp_ID_1}}"
										},
										{
											"key": "{{Comp_Pass}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE COMPANY",
					"item": [
						{
							"name": "Success Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Company deleted successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"company_id\": \"{{Comp_ID_1}}\",\r\n  \"company_password\": \"company*123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Del_Comp}}",
									"host": [
										"{{BASE}}{{B_Del_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Missing company_id or company_password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"company_id\": \"C12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Del_Comp}}",
									"host": [
										"{{BASE}}{{B_Del_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Creds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid company ID or password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"company_id\": \"16\",\r\n  \"company_password\": \"wrongpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Del_Comp}}",
									"host": [
										"{{BASE}}{{B_Del_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL Injection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid input\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"company_id\": \"C12345'; DROP TABLE COMPANY; --\",\r\n  \"company_password\": \"company*123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Del_Comp}}",
									"host": [
										"{{BASE}}{{B_Del_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Handling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_Del_Comp}}",
									"host": [
										"{{BASE}}{{B_Del_Comp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bad Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"company_id\": \"C12345\"\r\n  \"company_password\": \"securepassword\"  // Missing comma between fields\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_Del_Comp}}",
									"host": [
										"{{BASE}}{{B_Del_Comp}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DISPLAY COMPANY APPLICATIONS",
					"item": [
						{
							"name": "Success_Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains eligible companies\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
											"    jsonData.forEach(function(student) {\r",
											"        pm.expect(student).to.have.property(\"Student ID\");\r",
											"        pm.expect(student).to.have.property(\"Certified Skills\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_App_Comp_Display}}?company_id=9&{{Comp_Pass}}",
									"host": [
										"{{BASE}}{{B_App_Comp_Display}}"
									],
									"query": [
										{
											"key": "company_id",
											"value": "9"
										},
										{
											"key": "{{Comp_Pass}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message for missing student ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Password doesn't match\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_App_Comp_Display}}?company_id=5&company_password={{Comp_Invalid_pass}}",
									"host": [
										"{{BASE}}{{B_App_Comp_Display}}"
									],
									"query": [
										{
											"key": "company_id",
											"value": "5"
										},
										{
											"key": "company_password",
											"value": "{{Comp_Invalid_pass}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message for missing Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Missing company_id or company_password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_App_Comp_Display}}?{{Comp_Invalid_pass}}",
									"host": [
										"{{BASE}}{{B_App_Comp_Display}}"
									],
									"query": [
										{
											"key": "{{Comp_Invalid_pass}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "XSS Attacks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response is sanitized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.not.include(\"<script>\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_App_Comp_Display}}?company_id=<script>alert('XSS')</script>&company_password=company*123A",
									"host": [
										"{{BASE}}{{B_App_Comp_Display}}"
									],
									"query": [
										{
											"key": "company_id",
											"value": "<script>alert('XSS')</script>"
										},
										{
											"key": "company_password",
											"value": "company*123A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL Injection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Invalid input\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_App_Comp_Display}}?company_id='; DROP TABLE STUDENT;--&{{Comp_Pass}}",
									"host": [
										"{{BASE}}{{B_App_Comp_Display}}"
									],
									"query": [
										{
											"key": "company_id",
											"value": "'; DROP TABLE STUDENT;--"
										},
										{
											"key": "{{Comp_Pass}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Handling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message indicates method not allowed\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_App_Comp_Display}}?company_id=5&{{Comp_Pass}}",
									"host": [
										"{{BASE}}{{B_App_Comp_Display}}"
									],
									"query": [
										{
											"key": "company_id",
											"value": "5"
										},
										{
											"key": "{{Comp_Pass}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UPDATE APPLICATION",
					"item": [
						{
							"name": "Success Accept",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Correct message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Application accepted and student status updated to 'Placed'\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"application_id\": \"803\",\r\n    \"company_id\": \"9\",\r\n    \"company_password\": \"company*123\",\r\n    \"status\": \"accept\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_App_Updtae}}",
									"host": [
										"{{BASE}}{{B_App_Updtae}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success Reject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Correct message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Application rejected\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"application_id\": \"903\",\r\n    \"company_id\": \"9\",\r\n    \"company_password\": \"company*123\",\r\n    \"status\": \"reject\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_App_Updtae}}",
									"host": [
										"{{BASE}}{{B_App_Updtae}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Missing application_id, company_id, company_password, or status\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company_id\": \"1\",\r\n    \"company_password\": \"company*123\",\r\n    \"status\": \"accept\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_App_Updtae}}",
									"host": [
										"{{BASE}}{{B_App_Updtae}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Password doesn\\'t match\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"application_id\": \"123\",\r\n    \"company_id\": \"1\",\r\n    \"company_password\": \"123\",\r\n    \"status\": \"accept\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_App_Updtae}}",
									"host": [
										"{{BASE}}{{B_App_Updtae}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Application Not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Application not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"application_id\": \"9\",\r\n    \"company_id\": \"1\",\r\n    \"company_password\": \"company*123\",\r\n    \"status\": \"accept\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_App_Updtae}}",
									"host": [
										"{{BASE}}{{B_App_Updtae}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Company Doesn't Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Company ID 16A doesn\\'t exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"application_id\": \"601\",\r\n    \"company_id\": \"16A\",\r\n    \"company_password\": \"company*123\",\r\n    \"status\": \"accept\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_App_Updtae}}",
									"host": [
										"{{BASE}}{{B_App_Updtae}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL Injection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid input\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"application_id\": \"A123; DROP TABLE COMPANY;\",\r\n    \"company_id\": \"16\",\r\n    \"company_password\": \"company*123\",\r\n    \"status\": \"accept\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE}}{{B_App_Updtae}}",
									"host": [
										"{{BASE}}{{B_App_Updtae}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Handling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Fixed JSON parsing\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"pm.test(\"Error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE}}{{B_App_Updtae}}",
									"host": [
										"{{BASE}}{{B_App_Updtae}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}